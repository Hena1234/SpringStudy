/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2024-01-09 00:31:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/dev_source/work_space_spring_multi1030/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/04_SpringAJAX/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/dev_source/work_space_spring_multi1030/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/04_SpringAJAX/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1704351123689L));
    _jspx_dependants.put("jar:file:/C:/dev_source/work_space_spring_multi1030/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/04_SpringAJAX/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("	<meta charset=\"UTF-8\">\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("	<title>AJAX 실습</title>\n");
      out.write("	<style>\n");
      out.write("        div {\n");
      out.write("            height: 200px;\n");
      out.write("            width: 100%;\n");
      out.write("            border: 1px solid black;\n");
      out.write("            margin-top: 3px;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<h2>AJAX 실습</h2>\n");
      out.write("    <hr>\n");
      out.write("    <h3>JavaScript를 활용한 AJAX 실습</h3>\n");
      out.write("    <h3>1. GET 방식을 통한 서버 송수신 방법</h3>\n");
      out.write("    <button onclick=\"ajaxTest1()\">get 방식 전송</button>\n");
      out.write("    <div id=\"div1\">\n");
      out.write("    </div>\n");
      out.write("    <script>\n");
      out.write("		function ajaxTest1(){\n");
      out.write("			\n");
      out.write("			// 1. xhr 객체 생성\n");
      out.write("			let xhr = new XMLHttpRequest();\n");
      out.write("\n");
      out.write("			// 2. onreadystatechange 이벤트 리스너 함수 생성(콜백 함수)\n");
      out.write("			//   -> 서버로 요청이 가고, 응답을 전달 받은 경우 호출되는 함수 -> 성공인지 실패인지는 안에서 다시 판단\n");
      out.write("			xhr.onreadystatechange = function(){\n");
      out.write("				console.log('readyState : ' + xhr.readyState);\n");
      out.write("				console.log('status : ' + xhr.status);\n");
      out.write("\n");
      out.write("				if(xhr.readyState == 4){ // 4 : 요청은 성공한 상태\n");
      out.write("					if(xhr.status == 200){ // 200 : HTTP 응답코드로 응답이 성공한 경우\n");
      out.write("						let str = xhr.responseText; // 응답 결과\n");
      out.write("						document.getElementById('div1').innerHTML += '응답 결과<br>' + str + '<br>';\n");
      out.write("					} else{\n");
      out.write("						 // 응답 결과가 좋지 않을때, \n");
      out.write("                        // 404 : not found, 500 : 서버에러, 403 : forbidden= get/post\n");
      out.write("                        document.getElementById('div1').innerHTML += '에러 발생!' + '<br>';\n");
      out.write("					}\n");
      out.write("				} else{\n");
      out.write("					// 요청 자체가 실패한 경우! ex) Client 네트워크 에러, URL이 잘못된 경우 등\n");
      out.write("					// alert('인터넷 오류 발생!');\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			// 3. xhr open 시 필요한 정보 셋팅\n");
      out.write("			let url = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/jsAjax.do';\n");
      out.write("			let getParameter = '?name=홍길동&age=31';\n");
      out.write("			url += getParameter;\n");
      out.write("\n");
      out.write("			// 4. xhr open 시도, 연결이 실패하면 에러 발생!\n");
      out.write("			//open(method: string, url: string, async(비동기 여부): boolean)\n");
      out.write("			xhr.open('get', url, true);\n");
      out.write("\n");
      out.write("			// 5. xhr 전송\n");
      out.write("			xhr.send(); // 실제 get요청이 날라가는 시점\n");
      out.write("		}\n");
      out.write("	</script>\n");
      out.write("    <hr><br>\n");
      out.write("\n");
      out.write("	<h3>2. POST 방식을 통한 서버 송수신 방법</h3>\n");
      out.write("    <button onclick=\"ajaxTest2();\">Post 방식 전송</button>\n");
      out.write("    <div id=\"div2\"></div>\n");
      out.write("	<script>\n");
      out.write("		function ajaxTest2(){\n");
      out.write("			let xhr = new XMLHttpRequest();\n");
      out.write("			xhr.onreadystatechange = function(){\n");
      out.write("				document.getElementById('div2').innerHTML = 'status : ' + xhr.status + '<br>';\n");
      out.write("				// 정상 응답인 경우\n");
      out.write("				if(xhr.readyState == 4 && xhr.status == 200){\n");
      out.write("					let str = xhr.responseText; // 응답 결과\n");
      out.write("					document.getElementById('div2').innerHTML += '응답 결과<br>' + str + '<br>';\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("			let url = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/jsAjax.do';\n");
      out.write("			let parameter = 'name=최길동&age=21'; // get하고 다른점은 반드시 '?' 제거 할 것!\n");
      out.write("			xhr.open('post', url, true);\n");
      out.write("			xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n");
      out.write("			xhr.send(parameter);\n");
      out.write("		}\n");
      out.write("	</script>\n");
      out.write("	<hr><br>\n");
      out.write("	<h2>Jquery 방식의 AJAX 실습</h2>\n");
      out.write("\n");
      out.write("    <h3>1. get 방식 서버 요청</h3>\n");
      out.write("    <button id=\"ajaxSend1\"> GET방식 전송</button>\n");
      out.write("    <p> 메세지 : <input type=\"text\" id=\"input1\" /></p>\n");
      out.write("    <div id=\"div3\"></div>\n");
      out.write("	<script></script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/home.jsp(6,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("path");
      // /WEB-INF/views/home.jsp(6,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/home.jsp(6,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
