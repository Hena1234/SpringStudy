<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>
<c:set var="path" value="${pageContext.request.contextPath}"/>

<!DOCTYPE html>
<html lang="ko">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>AJAX 실습</title>
	<style>
        div {
            height: 200px;
            width: 100%;
            border: 1px solid black;
            margin-top: 3px;
        }
    </style>
</head>
<body>
	<h2>AJAX 실습</h2>
    <hr>
    <h3>JavaScript를 활용한 AJAX 실습</h3>
    <h3>1. GET 방식을 통한 서버 송수신 방법</h3>
    <button onclick="ajaxTest1()">get 방식 전송</button>
    <div id="div1">
    </div>
    <script>
		function ajaxTest1(){
			
			// 1. xhr 객체 생성
			let xhr = new XMLHttpRequest();

			// 2. onreadystatechange 이벤트 리스너 함수 생성(콜백 함수)
			//   -> 서버로 요청이 가고, 응답을 전달 받은 경우 호출되는 함수 -> 성공인지 실패인지는 안에서 다시 판단
			xhr.onreadystatechange = function(){
				console.log('readyState : ' + xhr.readyState);
				console.log('status : ' + xhr.status);

				if(xhr.readyState == 4){ // 4 : 요청은 성공한 상태
					if(xhr.status == 200){ // 200 : HTTP 응답코드로 응답이 성공한 경우
						let str = xhr.responseText; // 응답 결과
						document.getElementById('div1').innerHTML += '응답 결과<br>' + str + '<br>';
					} else{
						 // 응답 결과가 좋지 않을때, 
                        // 404 : not found, 500 : 서버에러, 403 : forbidden= get/post
                        document.getElementById('div1').innerHTML += '에러 발생!' + '<br>';
					}
				} else{
					// 요청 자체가 실패한 경우! ex) Client 네트워크 에러, URL이 잘못된 경우 등
					// alert('인터넷 오류 발생!');
				}
			}

			// 3. xhr open 시 필요한 정보 셋팅
			let url = '${path}/jsAjax.do';
			let getParameter = '?name=홍길동&age=31';
			url += getParameter;

			// 4. xhr open 시도, 연결이 실패하면 에러 발생!
			//open(method: string, url: string, async(비동기 여부): boolean)
			xhr.open('get', url, true);

			// 5. xhr 전송
			xhr.send(); // 실제 get요청이 날라가는 시점
		}
	</script>
    <hr><br>

	<h3>2. POST 방식을 통한 서버 송수신 방법</h3>
    <button onclick="ajaxTest2();">Post 방식 전송</button>
    <div id="div2"></div>
	<script>
		function ajaxTest2(){
			let xhr = new XMLHttpRequest();
			xhr.onreadystatechange = function(){
				document.getElementById('div2').innerHTML = 'status : ' + xhr.status + '<br>';
				// 정상 응답인 경우
				if(xhr.readyState == 4 && xhr.status == 200){
					let str = xhr.responseText; // 응답 결과
					document.getElementById('div2').innerHTML += '응답 결과<br>' + str + '<br>';
				}
			}
			let url = '${path}/jsAjax.do';
			let parameter = 'name=최길동&age=21'; // get하고 다른점은 반드시 '?' 제거 할 것!
			xhr.open('post', url, true);
			xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			xhr.send(parameter);
		}
	</script>
	<hr><br>
	<h2>Jquery 방식의 AJAX 실습</h2>

    <h3>1. get 방식 서버 요청</h3>
    <button id="ajaxSend1"> GET방식 전송</button>
    <p> 메세지 : <input type="text" id="input1" /></p>
    <div id="div3"></div>
	<script></script>
</body>
</html>

